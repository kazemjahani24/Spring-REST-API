<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.luv2code.springdemo</groupId>
	<artifactId>spring-crm-rest</artifactId>
	<version>1.0.0</version>
	<packaging>war</packaging>

			<!-- the details in th properties means which versions of spring ,hibernate and mySql i am  using  -->
	<properties>
		<springframework.version>5.2.4.RELEASE</springframework.version>
		<hibernate.version>5.4.1.Final</hibernate.version>
		<mysql.connector.version>5.1.45</mysql.connector.version>
		<c3po.version>0.9.5.2</c3po.version>

		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>

	<dependencies>

		<!-- Spring
			we are using spring-webmvc because it includes REST Support
			and REST makes use of webMVC
		 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${springframework.version}</version>
		</dependency>

			<!-- 
			in the lines below we are making use of transactions because we 
				are using hibernate in background for proecssing our data Request
			 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${springframework.version}</version>
		</dependency>
		
		
		<!-- in the lines below, we are making use of spring-orm because these are 
			spring supporting classes for using  hibernate
		 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${springframework.version}</version>
		</dependency>

		<!-- Add Jackson for JSON converters
			becuse we are making use of jackson to convert java pojo to json
			and the other way around
		 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.9.5</version>
		</dependency>

		<!--
			in the lines below we are using Hibernate, so hibernate is our  OR mapping tool
			for actually storing data into the database
			so we are making use of MySQL as actuall database
			
			object-relational mapping tool
			Hibernate ORM (or simply Hibernate) is an object-relational mapping tool for the Java programming language.
			 It provides a framework for mapping an object-oriented domain model to a relational database. ... It generates 
			 SQL calls and relieves the developer from the manual handling and object conversion of the result set.
		 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate.version}</version>
		</dependency>

		<!-- MySQL -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.connector.version}</version>
		</dependency>

		<!-- C3PO is our connection pooling framework for actually managing the database
			connection for us in a nice pooled fashion
		 -->
		<dependency>
			<groupId>com.mchange</groupId>
			<artifactId>c3p0</artifactId>
			<version>${c3po.version}</version>
		</dependency>

		<!-- Servlet+JSP+JSTL
			 we use depedancy for servlet api because spring mvc  uses servlet api in the
			 background
		 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
		</dependency>

			<!-- this is dependancy for jsp -->
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>javax.servlet.jsp-api</artifactId>
			<version>2.3.1</version>
		</dependency>

	


		<!--
		 to compensate for java 9 not including jaxb (this dependency is deleted from this code
		if you work with java 9 and above then make sure to include it)
		-->
	
	</dependencies>

	<build>

		<finalName>spring-crm-rest</finalName>

		<plugins>

			<!-- Builds a Web Application Archive (WAR) file from the project output 
				and its dependencies. -->
			<plugin>
				<!-- Add Maven coordinates (GAV) for: maven-war-plugin -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.2.0</version>
			</plugin>

		</plugins>
	</build>
</project>

